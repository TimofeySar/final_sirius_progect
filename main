import telebot
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import random

TOKEN = '7383941068:AAELJkcVfnKOj8voO5BafNjvfcQLnF-BWvk'
bot = telebot.TeleBot(TOKEN)

games = {}
sessions = {}

playerSymbols = ["‚ùå", "üîµ"]

try:
    @bot.message_handler(commands=['start'])
    def start(message):
        markup = types.ReplyKeyboardRemove()
        bot.send_message(message.chat.id, """–≠—Ç–æ –±–æ—Ç —Å –∏–≥—Ä–∞–º–∏, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start \n
        —Å–∞–ø–µ—Ä: /miner \n
        –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏: /crestiki\n
        21 : /twenty_one\n
        –∫–ª–∏–∫–µ—Ä : /cliker \n
        –ö–∞–º–µ–Ω—å - –Ω–æ–∂–Ω–∏—Ü—ã - –±—É–º–∞–≥–∞: /zuefa\n
        –±—Ä–æ–¥–∏–ª–∫–∞: /going\n
        –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞: /questions\n
        –†–ü–ì: /rpg""", reply_markup=markup)


    @bot.message_handler(commands=['crestiki'])
    def cresti(message):
        bot.send_message(message.chat.id, '–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –Ω–∞–∂–º–∏—Ç–µ /noliki')

        @bot.message_handler(commands=['noliki'])
        def welcome(message):
            chat_id = message.chat.id
            clear_game(chat_id)
            bot.send_message(chat_id, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å")
            send_game_board(chat_id)

        def clear_game(chat_id):
            games[chat_id] = {
                "gameGround": [" "] * 9,
                "currentPlayer": 0,
                "gameIsStart": True
            }

        def check_winner(gameGround):
            winning_positions = [
                (0, 1, 2), (3, 4, 5), (6, 7, 8),
                (0, 3, 6), (1, 4, 7), (2, 5, 8),
                (0, 4, 8), (2, 4, 6)
            ]
            for pos in winning_positions:
                if gameGround[pos[0]] == gameGround[pos[1]] == gameGround[pos[2]] and gameGround[pos[0]] != " ":
                    return gameGround[pos[0]]
            if " " not in gameGround:
                return "draw"
            return None

        def send_game_board(chat_id):
            game = games[chat_id]
            markup = types.InlineKeyboardMarkup(row_width=3)
            for i in range(0, 9, 3):
                markup.row(types.InlineKeyboardButton(game['gameGround'][i], callback_data=f'ttt_{i}'),
                           types.InlineKeyboardButton(game['gameGround'][i + 1], callback_data=f'ttt_{i + 1}'),
                           types.InlineKeyboardButton(game['gameGround'][i + 2], callback_data=f'ttt_{i + 2}'))
            bot.send_message(chat_id, f"–ü–µ—Ä–≤—ã–π —Ö–æ–¥ - {playerSymbols[0]}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É:", reply_markup=markup)

        @bot.callback_query_handler(func=lambda call: call.data.startswith('ttt_'))
        def callback_inline(call):
            chat_id = call.message.chat.id
            game = games[chat_id]

            index = int(call.data.split('_')[1])
            if game['gameGround'][index] == " ":
                game['gameGround'][index] = playerSymbols[game['currentPlayer']]
                game['currentPlayer'] = 1 - game['currentPlayer']

            winner = check_winner(game['gameGround'])

            markup = types.InlineKeyboardMarkup(row_width=3)
            for i in range(0, 9, 3):
                markup.row(types.InlineKeyboardButton(game['gameGround'][i], callback_data=f'ttt_{i}'),
                           types.InlineKeyboardButton(game['gameGround'][i + 1], callback_data=f'ttt_{i + 1}'),
                           types.InlineKeyboardButton(game['gameGround'][i + 2], callback_data=f'ttt_{i + 2}'))

            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=markup)

            if winner:
                clear_game(chat_id)
                if winner == "draw":
                    bot.send_message(chat_id, "–ù–∏—á—å—è!")
                else:
                    bot.send_message(chat_id, f"–ü–æ–±–µ–¥–∏–ª {winner}!")
            else:
                bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É", chat_id=chat_id, message_id=call.message.message_id,
                                      reply_markup=markup)


    @bot.message_handler(commands=['miner'])
    def miner(message):
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ /sapper.")

        sessions = {}

        def create_empty_board(size=8):
            return [[' ' for _ in range(size)] for _ in range(size)]

        def place_ships(board, ship_count=10):
            size = len(board)
            placed_ships = 0
            while placed_ships < ship_count:
                row = random.randint(0, size - 1)
                col = random.randint(0, size - 1)
                if board[row][col] == ' ':
                    board[row][col] = 'O'
                    placed_ships += 1
            return board

        def check_win(otvety, board):
            for row in range(len(board)):
                for col in range(len(board[row])):
                    if otvety[row][col] == 'O' and board[row][col] != 'üö©':
                        return False
            return True

        def count_ships_around(row, col, board):
            count = 0
            size = len(board)
            for r in range(max(0, row - 1), min(size, row + 2)):
                for c in range(max(0, col - 1), min(size, col + 2)):
                    if board[r][c] == 'O' and (r != row or c != col):
                        count += 1
            return str(count)

        def create_game_board(board):
            markup = InlineKeyboardMarkup(row_width=8)
            buttons = []
            for row in range(len(board)):
                for col in range(len(board[row])):
                    text = board[row][col]
                    if text == ' ':
                        text = f'{row},{col}'
                    elif text == 'x':
                        text = 'üí£'
                    elif text == '1':
                        text = '1Ô∏è‚É£'
                    elif text == '2':
                        text = '2Ô∏è‚É£'
                    elif text == '3':
                        text = '3Ô∏è‚É£'
                    elif text == '4':
                        text = '4Ô∏è‚É£'
                    elif text == '5':
                        text = '5Ô∏è‚É£'
                    elif text == '6':
                        text = '6Ô∏è‚É£'
                    elif text == '7':
                        text = '7Ô∏è‚É£'
                    elif text == '0':
                        text = '0Ô∏è‚É£'
                    buttons.append(InlineKeyboardButton(text, callback_data=f'sapper_{row},{col}'))
            markup.row(InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥", callback_data="sapper_flag"))

            for i in range(0, len(buttons), 8):
                markup.row(*buttons[i:i + 8])
            return markup

        @bot.message_handler(commands=['sapper'])
        def start(message):
            chat_id = message.chat.id
            try:
                bot.delete_message(message.chat.id, message.message_id - 1)
                bot.delete_message(message.chat.id, message.message_id - 2)
            except:
                pass
            board_with_ships = create_empty_board()
            otvety = place_ships(board_with_ships)
            session = {
                'otvety': otvety,
                'board': create_empty_board(),
                'hits_count': 0,
                'game_active': True,
                'waiting_for_flag_input': False,
                'flag_message_id': None
            }
            sessions[chat_id] = session
            board_markup = create_game_board(session['board'])
            bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–°–∞–ø–µ—Ä'!", reply_markup=board_markup)

        @bot.callback_query_handler(func=lambda call: call.data == 'sapper_flag')
        def handle_flag_query(call):
            chat_id = call.message.chat.id
            session = sessions.get(chat_id)
            if session and session['game_active']:
                try:
                    session['waiting_for_flag_input'] = True
                    message = bot.send_message(chat_id,
                                                     f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—Å—Ç—Ä–æ–∫–∞,—Å—Ç–æ–ª–±–µ—Ü' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,1):")
                    session['flag_message_id'] = message.message_id

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ñ–ª–∞–≥–∞: {e}")

        @bot.message_handler(func=lambda message: sessions.get(message.chat.id, {}).get('waiting_for_flag_input'))
        def process_flag_input(message):
            chat_id = message.chat.id
            session = sessions.get(chat_id)
            if not session:
                return
            try:
                row, col = map(int, message.text.split(','))
                if 0 <= row < len(session['board']) and 0 <= col < len(session['board'][0]):
                    session['board'][row][col] = 'üö©'
                    new_board = create_game_board(session['board'])
                    bot.delete_message(chat_id, message.message_id)
                    bot.delete_message(chat_id, session['flag_message_id'])
                    game_message = bot.send_message(chat_id, '–§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω', reply_markup=new_board)
                    bot.delete_message(chat_id, game_message.message_id - 3)
                    session['waiting_for_flag_input'] = False
                else:
                    bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")
                session['hits_count'] += 1
                if session['hits_count'] == 10:
                    session['game_active'] = False
                    if check_win(session['otvety'], session['board']):
                        bot.send_message(chat_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ /sapper.")
                    else:
                        bot.send_message(chat_id,
                                               "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ù–µ –≤—Å–µ —Ñ–ª–∞–≥–∏ —Å—Ç–æ—è—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ /start.")

            except ValueError:
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,1).")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")

        @bot.callback_query_handler(func=lambda call: call.data.startswith('sapper_'))
        def handle_query(call):
            chat_id = call.message.chat.id
            session = sessions.get(chat_id)
            if not session or not session['game_active']:
                return
            if call.data == 'flag':
                return
            if call.data == 'üö©':
                return

            try:
                row, col = map(int, call.data.split('_')[1].split(','))
                if session['otvety'][row][col] == 'O':
                    session['board'][row][col] = 'x'
                    session['game_active'] = False
                    bot.send_message(chat_id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ /sapper.")
                    session['hits_count'] += 1
                    bot.answer_callback_query(call.id, f"–≤—ã –ø–æ–ø–∞–ª–∏ {row},{col}")
                elif session['otvety'][row][col] == ' ':
                    session['board'][row][col] = count_ships_around(row, col, session['otvety'])

            except:
                pass
            new_board = create_game_board(session['board'])
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=new_board)



    @bot.message_handler(commands=['twenty_one'])
    def black_jack(message):
        bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ /lets_go')
        games = {}

        class BlackJack:
            def __init__(self):
                self.create_deck()
                self.hand = []
                self.dealer_hand = []

            def create_deck(self):
                self.deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4
                random.shuffle(self.deck)
                return self.deck

            def give_hand(self):
                card = self.deck.pop()
                self.hand.append(card)
                return card

            def give_dealer_hand(self):
                dealer_card = self.deck.pop()
                self.dealer_hand.append(dealer_card)

            def player_hit(self):
                return self.give_hand()

            def calc_hand(self, hand):
                total = sum(hand)
                aces = hand.count(11)
                while total > 21 and aces:
                    total -= 10
                    aces -= 1
                return total

            def start_deal(self):
                self.hand.clear()
                self.dealer_hand.clear()
                self.create_deck()
                self.give_hand()
                self.give_dealer_hand()
                self.give_hand()

            def get_game_state(self):
                return {
                    'hand': self.hand,
                    'dealer_hand': self.dealer_hand,
                    'total': self.calc_hand(self.hand),
                    'total_dealer': self.calc_hand(self.dealer_hand)
                }

        @bot.message_handler(commands=['lets_go'])
        def start_game(message):
            chat_id = message.chat.id
            games[chat_id] = BlackJack()
            games[chat_id].start_deal()
            state = games[chat_id].get_game_state()

            bot.send_message(chat_id, f"–í–∞—à–∞ —Ä—É–∫–∞: {state['hand']}, –≤–∞—à —Å—á—ë—Ç: {state['total']}")
            bot.send_message(chat_id, f"–í–∏–¥–∏–º–∞—è –∫–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {state['dealer_hand'][0]}")
            game_do(chat_id)

        def game_do(chat_id):
            markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
            itembtn1 = types.KeyboardButton('Hit')
            itembtn2 = types.KeyboardButton('Stand')
            markup.add(itembtn1, itembtn2)
            bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

        @bot.message_handler(func=lambda message: message.text in ['Hit', 'Stand'])
        def handle_doing(message):
            chat_id = message.chat.id
            if chat_id not in games:
                bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /lets_go")
                return

            game = games[chat_id]
            state = game.get_game_state()

            if message.text == 'Hit':
                card = game.player_hit()
                state = game.get_game_state()

                bot.send_message(chat_id, f"–í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É {card}! –í–∞—à–∞ —Ä—É–∫–∞: {state['hand']}, —Å—á—ë—Ç: {state['total']}")

                if state['total'] > 21:
                    bot.send_message(chat_id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ü–µ—Ä–µ–±–æ—Ä. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
                    del games[chat_id]
                else:
                    game_do(chat_id)

            elif message.text == 'Stand':
                while game.calc_hand(game.dealer_hand) < 17:
                    game.give_dealer_hand()
                    state = game.get_game_state()

                bot.send_message(chat_id, f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {state['dealer_hand']}, —Å—É–º–º–∞ –æ—á–∫–æ–≤: {state['total_dealer']}")

                player_total = state['total']
                dealer_total = state['total_dealer']

                if dealer_total > 21 or player_total > dealer_total:
                    bot.send_message(chat_id, "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
                elif player_total < dealer_total:
                    bot.send_message(chat_id, "–î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª!")
                else:
                    bot.send_message(chat_id, "–ù–∏—á—å—è!")

                del games[chat_id]

    @bot.message_handler(commands=['cliker'])
    def cliker(message):
        bot.send_message(message.chat.id, '–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –≤–≤–µ–¥–∏—Ç–µ /click')

        clicker_clients={}
        mycommands=[]
        mycommands.append("–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥")
        mycommands.append("–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å")
        @bot.message_handler(commands=['click'])
        def send_welcome(message):
            bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Lukoil Simulator bot! –î–ª—è –¥–æ–±—ã—á–∏ –Ω–µ—Ñ—Ç–∏  –Ω–∞–ø–∏—à–∏—Ç–µ '/gamestart'.")


        @bot.message_handler(commands=['reload'])
        def button_message(message):
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1 = types.KeyboardButton("–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å")
                    item2 = types.KeyboardButton("–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥")
                    markup.add(item1,item2)
                    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ!", reply_markup=markup)

        @bot.message_handler(commands=['gamestart'])
        def button_message(message):
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    item1 = types.KeyboardButton("–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å")
                    item2 = types.KeyboardButton("–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥")
                    markup.add(item1,item2)
                    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –ø–µ—Ä–≤—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å'.", reply_markup=markup)
                    clicker_clients[message.chat.id]=clickerclass()

        @bot.message_handler(func=lambda message: message.text in ['–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å', '–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥'])
        def clicker_obrabotka(message):
            if message.text in mycommands:
                clicker_clients[message.chat.id].message_reply(message)


        class clickerclass:
            factoryamount = 0
            oilamount = 0

            def __init__(self):
                self.factoryamount=0
                self.oilamount=0

            def message_reply(self,message):
                if message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount >= 200 and self.factoryamount == 0:
                    bot.send_message(message.chat.id, "–í—ã –∫—É–ø–∏–ª–∏ –∑–∞–≤–æ–¥ –∑–∞ 200 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.factoryamount += 1
                    self.oilamount -= 200
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount <200:
                    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ 200 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞")
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 0:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 5 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 5
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)

                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 1:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 10 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 10
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount >= 500 and self.factoryamount == 1:
                    bot.send_message(message.chat.id, "–í—ã –∫—É–ø–∏–ª–∏ –∑–∞–≤–æ–¥ –∑–∞ 500 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.factoryamount += 1
                    self.oilamount -= 500
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.factoryamount == 1:
                    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ 500 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞")

                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount >= 1000 and self.factoryamount == 2:
                    bot.send_message(message.chat.id, "–í—ã –∫—É–ø–∏–ª–∏ –∑–∞–≤–æ–¥ –∑–∞ 1000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.factoryamount += 1
                    self.oilamount -= 1400
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.factoryamount == 2:
                    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ 1000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞")
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 2:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 20 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 20
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)

                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount >= 4000 and self.factoryamount == 3:
                    bot.send_message(message.chat.id, "–í—ã –∫—É–ø–∏–ª–∏ –∑–∞–≤–æ–¥ –∑–∞ 4000 –Ω–µ—Ñ—Ç–∏")
                    self.factoryamount += 1
                    self.oilamount -= 4000
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.factoryamount == 3:
                    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ 4000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞")
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 3:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 50 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 50
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)

                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount >= 10000 and self.factoryamount == 4:
                    bot.send_message(message.chat.id, "–í—ã –∫—É–ø–∏–ª–∏ –∑–∞–≤–æ–¥ –∑–∞ 10000 –Ω–µ—Ñ—Ç–∏")
                    self.factoryamount += 1
                    self.oilamount -= 10000
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.factoryamount == 4:
                    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ 10000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞")
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 4:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 100 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 100
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)

                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount >= 20000 and self.factoryamount == 5:
                    bot.send_message(message.chat.id, "–í—ã –∫—É–ø–∏–ª–∏ –∑–∞–≤–æ–¥ –∑–∞ 20000 –Ω–µ—Ñ—Ç–∏")
                    self.factoryamount += 1
                    self.oilamount -= 20000
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.factoryamount == 5:
                    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ 20000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞")
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 5:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 175 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 175
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)

                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount >= 36000 and self.factoryamount == 6:
                    bot.send_message(message.chat.id, "–í—ã –∫—É–ø–∏–ª–∏ –∑–∞–≤–æ–¥ –∑–∞ 36000 –Ω–µ—Ñ—Ç–∏")
                    self.factoryamount += 1
                    self.oilamount -= 36000
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.factoryamount == 6:
                    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ 36000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞")
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 6:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 300 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 300
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)

                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount >= 65000 and self.factoryamount == 7:
                    bot.send_message(message.chat.id, "–í—ã –∫—É–ø–∏–ª–∏ –∑–∞–≤–æ–¥ –∑–∞ 65000 –Ω–µ—Ñ—Ç–∏")
                    self.factoryamount += 1
                    self.oilamount -= 65000
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.factoryamount == 7:
                    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ 65000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞")
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 7:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 500 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 500
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)

                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount >= 150000 and self.factoryamount == 8:
                    bot.send_message(message.chat.id, "–í—ã –∫—É–ø–∏–ª–∏ –∑–∞–≤–æ–¥ –∑–∞ 150000 –Ω–µ—Ñ—Ç–∏")
                    self.factoryamount += 1
                    self.oilamount -= 150000
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.factoryamount == 8:
                    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ 150000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞")
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 8:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 1000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 1000
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)

                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount >= 350000 and self.factoryamount == 9:
                    bot.send_message(message.chat.id, "–í—ã –∫—É–ø–∏–ª–∏ –∑–∞–≤–æ–¥ –∑–∞ 350000 –Ω–µ—Ñ—Ç–∏")
                    self.factoryamount += 1
                    self.oilamount -= 350000
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.factoryamount == 9:
                    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ 350000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–æ–¥–∞")
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 9:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 2000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 2000
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)

                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.oilamount >= 1000000 and self.factoryamount == 10:
                    bot.send_message(message.chat.id, "–í—ã –∫—É–ø–∏–ª–∏ –≤–µ—Å—å –õ—É–∫–æ–π–ª –∑–∞ 1000000 –Ω–µ—Ñ—Ç–∏!")
                    self.factoryamount += 1
                    self.oilamount -= 1000000
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.factoryamount == 10:
                    bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    bot.send_message(message.chat.id, "–í–∞–º –Ω—É–∂–Ω–æ 1000000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏ –¥–æ –ø–æ–∫—É–ø–∫–∏ –õ—É–∫–æ–π–ª–∞")
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 10:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 5000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 5000
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)
                elif message.text == "–ö—É–ø–∏—Ç—å –∑–∞–≤–æ–¥" and self.factoryamount == 11 and self.oilamount == 10000000:
                    bot.send_message(message.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∫–æ–Ω—Ü–∞! –í—ã –∫—É–ø–∏–ª–∏ –≤—Å–µ –æ—Å—Ç—Ä–æ–≤–∞ –ú–∞–ª—å–¥–∏–≤")
                    self.oilamount -= 10000000
                    self.factoryamount += 1
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 11:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 10000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 10000
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)
                elif message.text == "–î–æ–±—ã—Ç—å –Ω–µ—Ñ—Ç—å" and self.factoryamount == 12:
                    bot.send_message(message.chat.id, "–í—ã –¥–æ–±—ã–ª–∏ 50000 –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏")
                    self.oilamount += 50000
                    buf = "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å "
                    buf += str(self.oilamount)
                    buf += " –±–∞—Ä—Ä–µ–ª–µ–π –Ω–µ—Ñ—Ç–∏"
                    bot.send_message(message.chat.id, buf)
                else:
                    print("")

    @bot.message_handler(commands=['zuefa'])
    def button_message(message):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                it1 = types.KeyboardButton("üìú")
                it2 = types.KeyboardButton("‚úÇ")
                it3 = types.KeyboardButton("üóø")
                markup.add(it1)
                markup.add(it2)
                markup.add(it3)
                bot.send_message(message.chat.id,'—è –∫–Ω–æ–ø–∫–∏ –≤—ã—Å–ª–∞–ª, —Ç–µ–ø–µ—Ä—å —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å', reply_markup=markup)
    @bot.message_handler(func=lambda message: message.text in ['üìú', '‚úÇ', 'üóø'])
    def play_game(message):
        us = message.text
        bot_choise = random.choice(['üóø','üìú','‚úÇ'])

        if us == bot_choise:
            bot.send_message(message.chat.id, f'–ß—Ç–æ–∂–∂–∂. –ù–∏—á—å—è! –í—ã –≤—ã–±—Ä–∞–ª–∏ {us}, –∞ —è –≤—ã–±—Ä–∞–ª {bot_choise}')
        elif (us == 'üóø' and bot_choise == '‚úÇ') or (us == '‚úÇ' and bot_choise == 'üìú') or (us == 'üìú' and bot_choise == 'üóø'):
            bot.send_message(message.chat.id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–±–µ–¥–∏–ª–∏! –í—ã –≤—ã–±—Ä–∞–ª–∏ {us}, –∞ —è –≤—ã–±—Ä–∞–ª {bot_choise}')
        else:
            bot.send_message(message.chat.id, f'–Ø –ø–æ–±–µ–¥–∏–ª. –í—ã –≤—ã–±—Ä–∞–ª–∏ {us}, –∞ —è –≤—ã–±—Ä–∞–ª {bot_choise}. –£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!')


    maze = [
        [0, 1, 0, 1, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0]
    ]
    #all the player typ shi
    player_position = [0, 0]
    entrance_position = [4, 4]
    def is_valid_move(position):
        x, y = position
        if 0 <= x < len(maze) and 0 <= y < len(maze[0]) and maze[x][y] == 0:
            return True
        return False
    #player movement
    def move_player(direction):
        global player_position
        x, y = player_position
        if direction == 'up':
            new_position = [x - 1, y]
        elif direction == 'down':
            new_position = [x + 1, y]
        elif direction == 'left':
            new_position = [x, y - 1]
        elif direction == 'right':
            new_position = [x, y + 1]
        if is_valid_move(new_position):
            player_position = new_position
            return True
        return False
    #button bs
    def create_navigation_buttons():
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        x, y = player_position
        if is_valid_move([x - 1, y]):
            btn_up = types.KeyboardButton('up')
            markup.add(btn_up)
        if is_valid_move([x + 1, y]):
            btn_down = types.KeyboardButton('down')
            markup.add(btn_down)
        if is_valid_move([x, y - 1]):
            btn_left = types.KeyboardButton('left')
            markup.add(btn_left)
        if is_valid_move([x, y + 1]):
            btn_right = types.KeyboardButton('right')
            markup.add(btn_right)
        return markup
    #this resets the game
    def reset_game():
        global player_position
        player_position = [0, 0]
    #welcome stuff
    @bot.message_handler(commands=['going'])
    def send_welcome(message):
        reset_game()
        markup = create_navigation_buttons()
        bot.send_message(message.chat.id, "Welcome to the maze! use the buttons to navigate.", reply_markup=markup)
        bot.send_message(message.chat.id, f"Your position: {player_position}")
    #response
    @bot.message_handler(func=lambda message: message.text in ['up', 'down', 'left', 'right'])
    def handle_message(message):
        direction = message.text.lower()
        if direction in ['up', 'down', 'left', 'right']:
            if move_player(direction):
                if player_position == entrance_position:
                    bot.send_message(message.chat.id, "Congrats you have successfully escaped my basement!!")
                    reset_game()
                    bot.send_message(message.chat.id, "The game has been reset now you gotta find your way out again womp womp")
                markup = create_navigation_buttons()
                bot.send_message(message.chat.id, f"Moved {direction}. Your current position: {player_position}", reply_markup=markup)
            else:
                bot.reply_to(message, "Invalid move. Down bad homie. L")
        else:
            bot.reply_to(message, "Bruh use the buttons bozo.")

    questions = [
    '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å —Å —Å–∏–º–≤–æ–ª–æ–º —Å–∏–Ω–µ–π –ø—Ç–∏—Ü—ã?' ,
    '–ö–∞–∫–æ–µ –∏–º—è —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∫–∞–∫ "–ú–∞–ª—å—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∂–∏–ª"?' ,
    '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞?',
    '–ö—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–µ—Å–Ω–∏ "Bad Guy"?',
    '–ú–µ–ª–æ–¥–∏—é –∫–∞–∫–æ–π –ø–µ—Å–Ω–∏ –º–æ–∂–Ω–æ —Å—ã–≥—Ä–∞—Ç—å –±—É–∫–≤–∞–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ä—É–∫–∏ –∏ —Å—Ç–æ–ª–∞ ?',
    '–ß–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –∫–æ–ª–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ú–∞—Ä—Å',
    '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –≤–∏–¥–µ–æ–∏–≥—Ä–∞ —Å –ø–æ—Å—Ç—Ä–æ–π–∫–æ–π –∏ –≤—ã–∂–∏–≤–∞–Ω–∏–µ–º, –≥–¥–µ –º–æ–∂–Ω–æ –∏–≥—Ä–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ "–∫—Ä–µ–∞—Ç–∏–≤" –∏ "–≤—ã–∂–∏–≤–∞–Ω–∏–µ"?',
    '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –≤ –º–∏—Ä–µ?',
    '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫–∏ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–ª–∏–Ω–Ω—ã—Ö –ø–∞–ª–æ–∫ –∏ –º—è—á–∞?',
    '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∏–ø –æ–±—É–≤–∏, c –∫–æ—Ç–æ—Ä—ã–º –∏–≥—Ä–∞—é—Ç –≤ —Ö–æ–∫–∫–µ–π']
    answers = ['Twitter', '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä.', 'YouTube.', '–ë–∏–ª–ª–∏ –ê–π–ª–∏—à.', "Beliver.", '–ò–ª–æ–Ω –ú–∞—Å–∫', 'Minecraft.', '–§—É—Ç–±–æ–ª.', '–§—Ä–æ–ª–ª–±–æ–ª.', '–ö–æ–Ω—å–∫–∏.']
    clients={}
    @bot.message_handler(commands=['questions'])
    def button_message(message):
            clients[message.chat.id]=random.choice(range(0,len(questions)))
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            itm1 = types.KeyboardButton(answers[0])
            itm2 = types.KeyboardButton(answers[1])
            itm3 = types.KeyboardButton(answers[2])
            itm4 = types.KeyboardButton(answers[3])
            itm5 = types.KeyboardButton(answers[4])
            itm6 = types.KeyboardButton(answers[5])
            itm7 = types.KeyboardButton(answers[6])
            itm8 = types.KeyboardButton(answers[7])
            itm9 = types.KeyboardButton(answers[8])
            itm10 = types.KeyboardButton(answers[9])
            markup.add(itm1)
            markup.add(itm2)
            markup.add(itm3)
            markup.add(itm4)
            markup.add(itm5)
            markup.add(itm6)
            markup.add(itm7)
            markup.add(itm8)
            markup.add(itm9)
            markup.add(itm10)
            bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç! –Ø –í–∏–∫—Ç–æ—Ä. –î–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º –≤ –í–∏–∫—Ç–æ—Ä–∏–Ω—É \n", reply_markup=markup)
            bot.send_message(message.chat.id, questions[clients[message.chat.id]])

    @bot.message_handler (func=lambda message: message.text in ['Twitter', '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä.', 'YouTube.', '–ë–∏–ª–ª–∏ –ê–π–ª–∏—à.', "Beliver.", '–ò–ª–æ–Ω –ú–∞—Å–∫', 'Minecraft.', '–§—É—Ç–±–æ–ª.', '–§—Ä–æ–ª–ª–±–æ–ª.', '–ö–æ–Ω—å–∫–∏.'])
    def send_message(message):
            if message.text == answers[clients[message.chat.id]]:
                    bot.send_message(message.chat.id, '–ü—Ä–∞–≤–∏–ª—å–Ω–æ +1')
            else:
                    bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ')
            buf=random.choice(range(0, len(questions)))
            if(clients[message.chat.id]==buf):
                    if(buf==len(questions)-1):
                            clients[message.chat.id] = buf-1
                    else:
                            clients[message.chat.id] = buf + 1
            else:
                    clients[message.chat.id] = buf
            bot.send_message(message.chat.id, questions[clients[message.chat.id]])

    classes = ["Undead", "Humanoid", "Animals", "Plants", "Slimes", "Conjurations"]
    players = {}
    games = {}


    class Player:
        def __init__(self, name, Class, STR, AG, DEF, HP, MAX_HP, MP, LV, EXP):
            self.name = name
            self.Class = Class
            self.STR = STR
            self.AG = AG
            self.DEF = DEF
            self.HP = HP
            self.MAX_HP = MAX_HP
            self.MP = MP
            self.LV = LV
            self.EXP = EXP

        def attack(self):
            dam = self.STR * random.randrange(1, 12, 1)
            krit = self.AG * 0.8 * random.randrange(1, 12, 1)
            if krit > 74:
                dam *= 1.5
            return dam

        def take_dmg(self, strong):
            d = strong * random.randrange(1, 12, 1) - self.DEF * 2
            dodge = self.AG * 0.8 * random.randrange(1, 12, 1)
            if dodge > 74:
                d = 0
            self.HP -= max(d, 0)

        def heal(self):
            self.HP = min(self.HP + 20, self.MAX_HP)
            self.MP -= 50

        def stats_up(self):
            self.STR += 1
            self.AG += 1
            self.DEF += 1
            self.MAX_HP += 25
            self.MP += 5


    class Game_DND:
        def __init__(self):
            self.nowTurn = 1
            self.player_ent = None
            self.enemy_ent = None

        def init_enemy(self, player_lv):
            return Player("Slime", "Slime", player_lv * 2, player_lv * 2, player_lv * 2, player_lv * 30, player_lv * 30,
                          100, player_lv, player_lv * 10)

        def move(self, message):
            chat_id = message.chat.id
            player = players[chat_id]

            if self.nowTurn == 1:
                player.name = message.text
                choose_class(message)
                self.nowTurn = 2

            elif self.nowTurn == 2:
                if message.text == "–í–æ–∏–Ω":
                    player = Player(player.name, "Fighter", 5, 2, 5, 125, 125, 50, 1, 0)
                elif message.text == "–ú–∞–≥":
                    player = Player(player.name, "Mage", 2, 4, 1, 75, 75, 150, 1, 0)
                elif message.text == "–°—Ç—Ä–µ–ª–æ–∫":
                    player = Player(player.name, "Ranger", 1, 4, 3, 100, 100, 125, 1, 0)
                elif message.text == "–ë–∞—Ä–¥":
                    player = Player(player.name, "Bard", 1, 3, 3, 100, 100, 100, 1, 0)
                elif message.text == "–í–æ—Ä":
                    player = Player(player.name, "Thief", 3, 5, 2, 100, 100, 75, 1, 0)
                elif message.text == "–î—Ä—É–∏–¥":
                    player = Player(player.name, "Druid", 4, 1, 5, 75, 75, 125, 1, 0)

                players[chat_id] = player
                self.enemy_ent = self.init_enemy(player.LV)

                bot.send_message(chat_id, "Slime –ø—Ä–µ–≥—Ä–∞–∂–¥–∞–µ—Ç –≤–∞–º –ø—É—Ç—å!")
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton("–ê—Ç–∞–∫–æ–≤–∞—Ç—å!")
                markup.add(item1)
                bot.send_message(chat_id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å Slime", reply_markup=markup)
                self.nowTurn = 3

            elif message.text == "–ê—Ç–∞–∫–æ–≤–∞—Ç—å!":
                damage_dealt = player.attack()
                self.enemy_ent.HP -= damage_dealt
                bot.send_message(chat_id, f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ {damage_dealt} —É—Ä–æ–Ω–∞. –£ –≤—Ä–∞–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {self.enemy_ent.HP} HP.")

                if self.enemy_ent.HP > 0:
                    damage_received = self.enemy_ent.attack()
                    player.take_dmg(self.enemy_ent.STR)
                    bot.send_message(chat_id, f"–í–∞–º –Ω–∞–Ω–µ—Å–ª–∏ {damage_received} —É—Ä–æ–Ω–∞. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {player.HP} HP.")

                    if player.HP <= 0:
                        bot.send_message(chat_id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
                        self.nowTurn = 1
                else:
                    bot.send_message(chat_id, "–í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
                    player.EXP += self.enemy_ent.EXP
                    self.nowTurn = 1


    def choose_class(message):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        classes = ["–í–æ–∏–Ω", "–ú–∞–≥", "–°—Ç—Ä–µ–ª–æ–∫", "–ë–∞—Ä–¥", "–í–æ—Ä", "–î—Ä—É–∏–¥"]
        for cls in classes:
            markup.add(types.KeyboardButton(cls))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å", reply_markup=markup)


    @bot.message_handler(commands=["help"])
    def help_message(message):
        bot.send_message(message.chat.id, "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/startgame - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")


    @bot.message_handler(commands=["rpg"])
    def start_game(message):
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç. –î–∞, —Ç—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —É–¥–∏–≤–ª–µ–Ω, –Ω–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞ –æ–Ω. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø–∏—à–∏ /help - —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥")
        players[message.chat.id] = Player("", "", 0, 0, 0, 0, 0, 0, 0, 0)
        games[message.chat.id] = Game_DND()
        games[message.chat.id].move(message)


    @bot.message_handler(func=lambda message: message.text in ['–í–æ–∏–Ω', "–ú–∞–≥", "–°—Ç—Ä–µ–ª–æ–∫", "–ë–∞—Ä–¥","–í–æ—Ä", "–î—Ä—É–∏–¥", "–ê—Ç–∞–∫–æ–≤–∞—Ç—å!"])
    def handle_message(message):
        chat_id = message.chat.id
        if chat_id in games:
            game = games[chat_id]
            game.move(message)
except:
    pass

bot.polling(non_stop=True)
