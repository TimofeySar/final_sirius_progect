import telebot
from telebot import types
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
import random

TOKEN = '7383941068:AAELJkcVfnKOj8voO5BafNjvfcQLnF-BWvk'
bot = telebot.TeleBot(TOKEN)

games = {}
sessions = {}

playerSymbols = ["‚ùå", "üîµ"]


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, """–≠—Ç–æ –±–æ—Ç —Å –∏–≥—Ä–∞–º–∏, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ –∏–≥—Ä, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start \n
    —Å–∞–ø–µ—Ä: /miner \n
    –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏: /crestiki\n
    21 : /twenty_one""")


@bot.message_handler(commands=['crestiki'])
def cresti(message):
    bot.send_message(message.chat.id, '–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –Ω–∞–∂–º–∏—Ç–µ /noliki')

    @bot.message_handler(commands=['noliki'])
    def welcome(message):
        chat_id = message.chat.id
        clear_game(chat_id)
        bot.send_message(chat_id, "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å")
        send_game_board(chat_id)

    def clear_game(chat_id):
        games[chat_id] = {
            "gameGround": [" "] * 9,
            "currentPlayer": 0,
            "gameIsStart": True
        }

    def check_winner(gameGround):
        winning_positions = [
            (0, 1, 2), (3, 4, 5), (6, 7, 8),
            (0, 3, 6), (1, 4, 7), (2, 5, 8),
            (0, 4, 8), (2, 4, 6)
        ]
        for pos in winning_positions:
            if gameGround[pos[0]] == gameGround[pos[1]] == gameGround[pos[2]] and gameGround[pos[0]] != " ":
                return gameGround[pos[0]]
        if " " not in gameGround:
            return "draw"
        return None

    def send_game_board(chat_id):
        game = games[chat_id]
        markup = types.InlineKeyboardMarkup(row_width=3)
        for i in range(0, 9, 3):
            markup.row(types.InlineKeyboardButton(game['gameGround'][i], callback_data=f'ttt_{i}'),
                       types.InlineKeyboardButton(game['gameGround'][i + 1], callback_data=f'ttt_{i + 1}'),
                       types.InlineKeyboardButton(game['gameGround'][i + 2], callback_data=f'ttt_{i + 2}'))
        bot.send_message(chat_id, f"–ü–µ—Ä–≤—ã–π —Ö–æ–¥ - {playerSymbols[0]}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: call.data.startswith('ttt_'))
    def callback_inline(call):
        chat_id = call.message.chat.id
        game = games[chat_id]

        index = int(call.data.split('_')[1])
        if game['gameGround'][index] == " ":
            game['gameGround'][index] = playerSymbols[game['currentPlayer']]
            game['currentPlayer'] = 1 - game['currentPlayer']

        winner = check_winner(game['gameGround'])

        markup = types.InlineKeyboardMarkup(row_width=3)
        for i in range(0, 9, 3):
            markup.row(types.InlineKeyboardButton(game['gameGround'][i], callback_data=f'ttt_{i}'),
                       types.InlineKeyboardButton(game['gameGround'][i + 1], callback_data=f'ttt_{i + 1}'),
                       types.InlineKeyboardButton(game['gameGround'][i + 2], callback_data=f'ttt_{i + 2}'))

        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=markup)

        if winner:
            clear_game(chat_id)
            if winner == "draw":
                bot.send_message(chat_id, "–ù–∏—á—å—è!")
            else:
                bot.send_message(chat_id, f"–ü–æ–±–µ–¥–∏–ª {winner}!")
        else:
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É", chat_id=chat_id, message_id=call.message.message_id,
                                  reply_markup=markup)


@bot.message_handler(commands=['miner'])
def miner(message):
    bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ /sapper.")

    sessions = {}

    def create_empty_board(size=8):
        return [[' ' for _ in range(size)] for _ in range(size)]

    def place_ships(board, ship_count=15):
        size = len(board)
        placed_ships = 0
        while placed_ships < ship_count:
            row = random.randint(0, size - 1)
            col = random.randint(0, size - 1)
            if board[row][col] == ' ':
                board[row][col] = 'O'
                placed_ships += 1
        return board

    def check_win(otvety, board):
        for row in range(len(board)):
            for col in range(len(board[row])):
                if otvety[row][col] == 'O' and board[row][col] != 'üö©':
                    return False
        return True

    def count_ships_around(row, col, board):
        count = 0
        size = len(board)
        for r in range(max(0, row - 1), min(size, row + 2)):
            for c in range(max(0, col - 1), min(size, col + 2)):
                if board[r][c] == 'O' and (r != row or c != col):
                    count += 1
        return str(count)

    def create_game_board(board):
        markup = InlineKeyboardMarkup(row_width=8)
        buttons = []
        for row in range(len(board)):
            for col in range(len(board[row])):
                text = board[row][col]
                if text == ' ':
                    text = f'{row},{col}'
                elif text == 'x':
                    text = 'üí£'
                elif text == '1':
                    text = '1Ô∏è‚É£'
                elif text == '2':
                    text = '2Ô∏è‚É£'
                elif text == '3':
                    text = '3Ô∏è‚É£'
                elif text == '4':
                    text = '4Ô∏è‚É£'
                elif text == '5':
                    text = '5Ô∏è‚É£'
                elif text == '6':
                    text = '6Ô∏è‚É£'
                elif text == '7':
                    text = '7Ô∏è‚É£'
                elif text == '0':
                    text = '0Ô∏è‚É£'
                buttons.append(InlineKeyboardButton(text, callback_data=f'sapper_{row},{col}'))
        markup.row(InlineKeyboardButton("–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–ª–∞–≥", callback_data="sapper_flag"))

        for i in range(0, len(buttons), 8):
            markup.row(*buttons[i:i + 8])
        return markup

    @bot.message_handler(commands=['sapper'])
    def start(message):
        chat_id = message.chat.id
        try:
            bot.delete_message(message.chat.id, message.message_id - 1)
            bot.delete_message(message.chat.id, message.message_id - 2)
        except:
            pass
        board_with_ships = create_empty_board()
        otvety = place_ships(board_with_ships)
        session = {
            'otvety': otvety,
            'board': create_empty_board(),
            'hits_count': 0,
            'game_active': True,
            'waiting_for_flag_input': False,
            'flag_message_id': None
        }
        sessions[chat_id] = session
        board_markup = create_game_board(session['board'])
        bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–°–∞–ø–µ—Ä'!", reply_markup=board_markup)

    @bot.callback_query_handler(func=lambda call: call.data == 'sapper_flag')
    def handle_flag_query(call):
        chat_id = call.message.chat.id
        session = sessions.get(chat_id)
        if session and session['game_active']:
            try:
                session['waiting_for_flag_input'] = True
                message = bot.send_message(chat_id,
                                                 f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—Å—Ç—Ä–æ–∫–∞,—Å—Ç–æ–ª–±–µ—Ü' (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,1):")
                session['flag_message_id'] = message.message_id

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ñ–ª–∞–≥–∞: {e}")

    @bot.message_handler(func=lambda message: sessions.get(message.chat.id, {}).get('waiting_for_flag_input'))
    def process_flag_input(message):
        chat_id = message.chat.id
        session = sessions.get(chat_id)
        if not session:
            return
        try:
            row, col = map(int, message.text.split(','))
            if 0 <= row < len(session['board']) and 0 <= col < len(session['board'][0]):
                session['board'][row][col] = 'üö©'
                new_board = create_game_board(session['board'])
                bot.delete_message(chat_id, message.message_id)
                bot.delete_message(chat_id, session['flag_message_id'])
                game_message = bot.send_message(chat_id, '–§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω', reply_markup=new_board)
                bot.delete_message(chat_id, game_message.message_id - 1)
            else:
                bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")
            session['hits_count'] += 1
            if session['hits_count'] == 15:
                session['game_active'] = False
                if check_win(session['otvety'], session['board']):
                    bot.send_message(chat_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ /sapper.")
                else:
                    bot.send_message(chat_id,
                                           "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ù–µ –≤—Å–µ —Ñ–ª–∞–≥–∏ —Å—Ç–æ—è—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ /start.")
            session['waiting_for_flag_input'] = False
        except ValueError:
            bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,1).")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('sapper_'))
    def handle_query(call):
        chat_id = call.message.chat.id
        session = sessions.get(chat_id)
        if not session or not session['game_active']:
            return
        if call.data == 'flag':
            return
        if call.data == 'üö©':
            return

        try:
            row, col = map(int, call.data.split('_')[1].split(','))
            if session['otvety'][row][col] == 'O':
                session['board'][row][col] = 'x'
                session['game_active'] = False
                bot.send_message(chat_id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ /sapper.")
                session['hits_count'] += 1
                bot.answer_callback_query(call.id, f"–≤—ã –ø–æ–ø–∞–ª–∏ {row},{col}")
            elif session['otvety'][row][col] == ' ':
                session['board'][row][col] = count_ships_around(row, col, session['otvety'])

        except:
            pass
        new_board = create_game_board(session['board'])
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=new_board)



@bot.message_handler(commands=['twenty_one'])
def black_jack(message):
    bot.send_message(message.chat.id, '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –≤–≤–µ–¥–∏—Ç–µ /lets_go')
    games = {}

    class BlackJack:
        def __init__(self):
            self.create_deck()
            self.hand = []
            self.dealer_hand = []

        def create_deck(self):
            self.deck = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11] * 4
            random.shuffle(self.deck)
            return self.deck

        def give_hand(self):
            card = self.deck.pop()
            self.hand.append(card)
            return card

        def give_dealer_hand(self):
            dealer_card = self.deck.pop()
            self.dealer_hand.append(dealer_card)

        def player_hit(self):
            return self.give_hand()

        def calc_hand(self, hand):
            total = sum(hand)
            aces = hand.count(11)
            while total > 21 and aces:
                total -= 10
                aces -= 1
            return total

        def start_deal(self):
            self.hand.clear()
            self.dealer_hand.clear()
            self.create_deck()
            self.give_hand()
            self.give_dealer_hand()
            self.give_hand()

        def get_game_state(self):
            return {
                'hand': self.hand,
                'dealer_hand': self.dealer_hand,
                'total': self.calc_hand(self.hand),
                'total_dealer': self.calc_hand(self.dealer_hand)
            }

    @bot.message_handler(commands=['lets_go'])
    def start_game(message):
        chat_id = message.chat.id
        games[chat_id] = BlackJack()
        games[chat_id].start_deal()
        state = games[chat_id].get_game_state()

        bot.send_message(chat_id, f"–í–∞—à–∞ —Ä—É–∫–∞: {state['hand']}, –≤–∞—à —Å—á—ë—Ç: {state['total']}")
        bot.send_message(chat_id, f"–í–∏–¥–∏–º–∞—è –∫–∞—Ä—Ç–∞ –¥–∏–ª–µ—Ä–∞: {state['dealer_hand'][0]}")
        game_do(chat_id)

    def game_do(chat_id):
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
        itembtn1 = types.KeyboardButton('Hit')
        itembtn2 = types.KeyboardButton('Stand')
        markup.add(itembtn1, itembtn2)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

    @bot.message_handler(func=lambda message: message.text in ['Hit', 'Stand'])
    def handle_doing(message):
        chat_id = message.chat.id
        if chat_id not in games:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /lets_go")
            return

        game = games[chat_id]
        state = game.get_game_state()

        if message.text == 'Hit':
            card = game.player_hit()
            state = game.get_game_state()

            bot.send_message(chat_id, f"–í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É {card}! –í–∞—à–∞ —Ä—É–∫–∞: {state['hand']}, —Å—á—ë—Ç: {state['total']}")

            if state['total'] > 21:
                bot.send_message(chat_id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ü–µ—Ä–µ–±–æ—Ä. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
                del games[chat_id]
            else:
                game_do(chat_id)

        elif message.text == 'Stand':
            while game.calc_hand(game.dealer_hand) < 17:
                game.give_dealer_hand()
                state = game.get_game_state()

            bot.send_message(chat_id, f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {state['dealer_hand']}, —Å—É–º–º–∞ –æ—á–∫–æ–≤: {state['total_dealer']}")

            player_total = state['total']
            dealer_total = state['total_dealer']

            if dealer_total > 21 or player_total > dealer_total:
                bot.send_message(chat_id, "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
            elif player_total < dealer_total:
                bot.send_message(chat_id, "–î–∏–ª–µ—Ä –≤—ã–∏–≥—Ä–∞–ª!")
            else:
                bot.send_message(chat_id, "–ù–∏—á—å—è!")

            del games[chat_id]


bot.polling(non_stop=True)
